// Code generated by tool. DO NOT EDIT.
// app: cozeloop, biz: foundation

package errno

import (
	"github.com/coze-dev/coze-loop/backend/pkg/errorx/code"
)

const (
	CommonNoPermissionCode              = 602000101
	commonNoPermissionMessage           = "no access permission"
	commonNoPermissionNoAffectStability = true

	CommonBadRequestCode              = 602000201
	commonBadRequestMessage           = "bad request"
	commonBadRequestNoAffectStability = true

	CommonInvalidParamCode              = 602000202
	commonInvalidParamMessage           = "invalid param"
	commonInvalidParamNoAffectStability = true

	CommonBizInvalidCode              = 602000203
	commonBizInvalidMessage           = "biz operation is not allowed"
	commonBizInvalidNoAffectStability = true

	CommonResourceDuplicatedCode              = 602000204
	commonResourceDuplicatedMessage           = "resource duplicated"
	commonResourceDuplicatedNoAffectStability = true

	CommonNetworkTimeOutCode              = 602000701
	commonNetworkTimeOutMessage           = "network timeout"
	commonNetworkTimeOutNoAffectStability = false

	CommonInternalErrorCode              = 602000702
	commonInternalErrorMessage           = "internal error"
	commonInternalErrorNoAffectStability = false

	CommonRPCErrorCode              = 602000703
	commonRPCErrorMessage           = "rpc error"
	commonRPCErrorNoAffectStability = false

	CommonMySqlErrorCode              = 602000801
	commonMySqlErrorMessage           = "mysql error"
	commonMySqlErrorNoAffectStability = false

	CommonRedisErrorCode              = 602000803
	commonRedisErrorMessage           = "redis error"
	commonRedisErrorNoAffectStability = false

	FileSizeExceedLimitCode              = 602001001 // file size is too large
	fileSizeExceedLimitMessage           = "file size is too large"
	fileSizeExceedLimitNoAffectStability = true

	UserUniqNameExistCode              = 602002001 // user unique name exists
	userUniqNameExistMessage           = "user unique name exists"
	userUniqNameExistNoAffectStability = true

	UserEmailExistCode              = 602002002 // user email already exists
	userEmailExistMessage           = "user email already exists"
	userEmailExistNoAffectStability = true

	UserPasswordWrongCode              = 602002003 // user password wrong
	userPasswordWrongMessage           = "user password wrong"
	userPasswordWrongNoAffectStability = true

	UserNotExistCode              = 602002004 // user not exist
	userNotExistMessage           = "user not exist"
	userNotExistNoAffectStability = true

	AccountInsufficientCodeCode              = 602002005
	accountInsufficientCodeMessage           = "account insufficient"
	accountInsufficientCodeNoAffectStability = true

	AccountExpiredCodeCode              = 602002006
	accountExpiredCodeMessage           = "account expired"
	accountExpiredCodeNoAffectStability = true

	AccountOverdraftCodeCode              = 602002007
	accountOverdraftCodeMessage           = "account overdraft"
	accountOverdraftCodeNoAffectStability = true

	UserRegistrationControlBlockCode              = 602002008
	userRegistrationControlBlockMessage           = "email address is restricted from registration based on account security protocols"
	userRegistrationControlBlockNoAffectStability = true
)

func init() {

	code.Register(
		CommonNoPermissionCode,
		commonNoPermissionMessage,
		code.WithAffectStability(!commonNoPermissionNoAffectStability),
	)

	code.Register(
		CommonBadRequestCode,
		commonBadRequestMessage,
		code.WithAffectStability(!commonBadRequestNoAffectStability),
	)

	code.Register(
		CommonInvalidParamCode,
		commonInvalidParamMessage,
		code.WithAffectStability(!commonInvalidParamNoAffectStability),
	)

	code.Register(
		CommonBizInvalidCode,
		commonBizInvalidMessage,
		code.WithAffectStability(!commonBizInvalidNoAffectStability),
	)

	code.Register(
		CommonResourceDuplicatedCode,
		commonResourceDuplicatedMessage,
		code.WithAffectStability(!commonResourceDuplicatedNoAffectStability),
	)

	code.Register(
		CommonNetworkTimeOutCode,
		commonNetworkTimeOutMessage,
		code.WithAffectStability(!commonNetworkTimeOutNoAffectStability),
	)

	code.Register(
		CommonInternalErrorCode,
		commonInternalErrorMessage,
		code.WithAffectStability(!commonInternalErrorNoAffectStability),
	)

	code.Register(
		CommonRPCErrorCode,
		commonRPCErrorMessage,
		code.WithAffectStability(!commonRPCErrorNoAffectStability),
	)

	code.Register(
		CommonMySqlErrorCode,
		commonMySqlErrorMessage,
		code.WithAffectStability(!commonMySqlErrorNoAffectStability),
	)

	code.Register(
		CommonRedisErrorCode,
		commonRedisErrorMessage,
		code.WithAffectStability(!commonRedisErrorNoAffectStability),
	)

	code.Register(
		FileSizeExceedLimitCode,
		fileSizeExceedLimitMessage,
		code.WithAffectStability(!fileSizeExceedLimitNoAffectStability),
	)

	code.Register(
		UserUniqNameExistCode,
		userUniqNameExistMessage,
		code.WithAffectStability(!userUniqNameExistNoAffectStability),
	)

	code.Register(
		UserEmailExistCode,
		userEmailExistMessage,
		code.WithAffectStability(!userEmailExistNoAffectStability),
	)

	code.Register(
		UserPasswordWrongCode,
		userPasswordWrongMessage,
		code.WithAffectStability(!userPasswordWrongNoAffectStability),
	)

	code.Register(
		UserNotExistCode,
		userNotExistMessage,
		code.WithAffectStability(!userNotExistNoAffectStability),
	)

	code.Register(
		AccountInsufficientCodeCode,
		accountInsufficientCodeMessage,
		code.WithAffectStability(!accountInsufficientCodeNoAffectStability),
	)

	code.Register(
		AccountExpiredCodeCode,
		accountExpiredCodeMessage,
		code.WithAffectStability(!accountExpiredCodeNoAffectStability),
	)

	code.Register(
		AccountOverdraftCodeCode,
		accountOverdraftCodeMessage,
		code.WithAffectStability(!accountOverdraftCodeNoAffectStability),
	)

	code.Register(
		UserRegistrationControlBlockCode,
		userRegistrationControlBlockMessage,
		code.WithAffectStability(!userRegistrationControlBlockNoAffectStability),
	)

}
