// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package application

import (
	"github.com/coze-dev/coze-loop/backend/infra/db"
	"github.com/coze-dev/coze-loop/backend/infra/fileserver"
	"github.com/coze-dev/coze-loop/backend/infra/idgen"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/auth"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/auth/authservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/authn"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/file"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/openapi"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/space"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/user"
	"github.com/coze-dev/coze-loop/backend/modules/foundation/domain/user/service"
	auth2 "github.com/coze-dev/coze-loop/backend/modules/foundation/infra/auth"
	"github.com/coze-dev/coze-loop/backend/modules/foundation/infra/repo"
	"github.com/coze-dev/coze-loop/backend/modules/foundation/infra/repo/mysql"
	"github.com/coze-dev/coze-loop/backend/pkg/conf"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitAuthApplication(idgen2 idgen.IIDGenerator, db2 db.Provider) (auth.AuthService, error) {
	iUserDAO := mysql.NewUserDAOImpl(db2)
	iSpaceDAO := mysql.NewSpaceDAOImpl(db2)
	iSpaceUserDAO := mysql.NewSpaceUserDAOImpl(db2)
	iUserRepo := repo.NewUserRepo(db2, idgen2, iUserDAO, iSpaceDAO, iSpaceUserDAO)
	authService := NewAuthApplication(iUserRepo)
	return authService, nil
}

func InitAuthNApplication(idgen2 idgen.IIDGenerator, db2 db.Provider) (authn.AuthNService, error) {
	iAuthNDAO := mysql.NewAuthNDAOImpl(db2)
	iAuthNRepo := repo.NewAuthNRepo(idgen2, iAuthNDAO)
	authNService := NewAuthNApplication(iAuthNRepo)
	return authNService, nil
}

func InitSpaceApplication(idgen2 idgen.IIDGenerator, db2 db.Provider) (space.SpaceService, error) {
	iUserDAO := mysql.NewUserDAOImpl(db2)
	iSpaceDAO := mysql.NewSpaceDAOImpl(db2)
	iSpaceUserDAO := mysql.NewSpaceUserDAOImpl(db2)
	iUserRepo := repo.NewUserRepo(db2, idgen2, iUserDAO, iSpaceDAO, iSpaceUserDAO)
	spaceService, err := NewSpaceApplication(iUserRepo)
	if err != nil {
		return nil, err
	}
	return spaceService, nil
}

func InitUserApplication(idgen2 idgen.IIDGenerator, db2 db.Provider, configFactory conf.IConfigLoaderFactory) (user.UserService, error) {
	iUserDAO := mysql.NewUserDAOImpl(db2)
	iSpaceDAO := mysql.NewSpaceDAOImpl(db2)
	iSpaceUserDAO := mysql.NewSpaceUserDAOImpl(db2)
	iUserRepo := repo.NewUserRepo(db2, idgen2, iUserDAO, iSpaceDAO, iSpaceUserDAO)
	iUserService := service.NewUserService(db2, iUserRepo, idgen2)
	userService, err := NewUserApplication(iUserService, configFactory)
	if err != nil {
		return nil, err
	}
	return userService, nil
}

func InitFileApplication(objectStorage fileserver.BatchObjectStorage, authClient authservice.Client) (file.FileService, error) {
	iAuthProvider := auth2.NewAuthProvider(authClient)
	fileService := NewFileApplication(objectStorage, iAuthProvider)
	return fileService, nil
}

func InitFoundationOpenAPIApplication(objectStorage fileserver.BatchObjectStorage, authClient authservice.Client) (openapi.FoundationOpenAPIService, error) {
	iAuthProvider := auth2.NewAuthProvider(authClient)
	foundationOpenAPIService := NewFoundationOpenAPIApplication(objectStorage, iAuthProvider)
	return foundationOpenAPIService, nil
}

// wire.go:

var (
	userDomainSet = wire.NewSet(service.NewUserService, repo.NewUserRepo, mysql.NewUserDAOImpl, mysql.NewSpaceDAOImpl, mysql.NewSpaceUserDAOImpl)

	userSet = wire.NewSet(
		NewUserApplication,
		userDomainSet,
	)

	spaceSet = wire.NewSet(
		NewSpaceApplication,
		userDomainSet,
	)

	authSet = wire.NewSet(
		NewAuthApplication,
		userDomainSet,
	)

	authNSet = wire.NewSet(
		NewAuthNApplication, repo.NewAuthNRepo, mysql.NewAuthNDAOImpl,
	)

	fileSet = wire.NewSet(
		NewFileApplication, auth2.NewAuthProvider,
	)

	openAPISet = wire.NewSet(
		NewFoundationOpenAPIApplication, auth2.NewAuthProvider,
	)
)
